#!/bin/bash
# A utility script for working with your VirtualBox VMs on your macOS machine.

listvms() {
  # Strip the quotes and extra junk from each row.
  echo "$( vboxmanage list vms | perl -lne 'print $1 if(/"([^"]+)"/)' )"
}


# A function to get the first VM in our list of VMs (in case the user didn't
# specify a VM -- maybe because they only have one).
defaultvm() {
  echo $(listvms | sed -n '1p')
}


usage() {
  echo "A utility script for working with VMs."
  echo
  echo "Commands"
  echo "====================================================================="
  echo "plzvm create <name>"
  echo "               --iso <isopath> (required)"
  echo "               [--ostype <ostype>] (optional)"
  echo "               [--saveto <directory>] (default: $PWD)"
  echo "               [--hdd <size>] (default: 32gb)"
  echo "               [--ram <size>] (default: 1gb)"
  echo "               [--vram <size>] (default: 128mb)"
  echo "               [--sshport <port>] (optional)"
  echo
  echo "plzvm delete <name>"
  echo "plzvm open [name]"
  echo "plzvm start [name]"
  echo "plzvm stop [name]"
  echo "plzvm ssh [vm|user@vm]"
  echo "plzvm list vms"
  echo "plzvm list ports [vm]"
  echo "plzvm map <port1> to [vm:]<port2>"
  echo "plzvm unmap <vm|localhost>:<port>"
  echo "plzvm install"
  echo "plzvm uninstall"
  echo "plzvm help"
  echo
}


if [[ $1 = "help" || $1 = "-help" || $1 = "--help" || $1 == "-h" ]]; then
  implied=$(defaultvm) || $(echo default)
  echo "$(usage)"
  echo
  echo "Examples"
  echo "====================================================================="
  echo "Installing and uninstalling plzvm:"
  echo
  echo "plzvm install"
  echo "- Copies plzvm to /usr/local/bin/"
  echo
  echo "plzvm uninstall"
  echo "- Removes plzvm from /usr/local/bin/"
  echo
  echo "---------------------------------------------------------------------"
  echo "Starting and stopping VMs:"
  echo
  echo "plzvm open"
  echo "- Opens your \"$implied\" VM in a GUI window."
  echo
  echo "plzvm start"
  echo "- Starts your \"$implied\" VM."
  echo
  echo "plzvm stop"
  echo "- Stops your \"$implied\" VM."
  echo
  echo "plzvm open foo"
  echo "- Opens the VM named \"foo\" in a GUI window."
  echo
  echo "plzvm start foo"
  echo "- Starts the VM named \"foo\"."
  echo
  echo "plzvm stop foo"
  echo "- Stops the VM named \"foo\"."
  echo
  echo "---------------------------------------------------------------------"
  echo "Connecting to VMs:"
  echo
  echo "plzvm ssh"
  echo "- Connects to your \"$implied\" VM as the user \"$USER\"."
  echo
  echo "plzvm ssh foo"
  echo "- Connects to the VM named \"foo\" as the user \"$USER\"."
  echo
  echo "plzvm ssh alice@foo"
  echo "- Connects to the VM named \"foo\" VM as the user \"alice\"."
  echo
  echo "---------------------------------------------------------------------"
  echo "Listing VMs and mapped ports:"
  echo
  echo "plzvm list vms"
  echo "- Lists your available VMs."
  echo
  echo "plzvm list ports"
  echo "- Lists the mapped ports on all your VMs."
  echo
  echo "plzvm list ports foo"
  echo "- Lists the mapped ports on the VM named \"foo\"."
  echo
  echo "---------------------------------------------------------------------"
  echo "Mapping and unmapping ports:"
  echo
  echo "plzvm map 8080 to 80"
  echo "- Maps your Mac's port 8080 to port 80 on your \"$implied\" VM."
  echo
  echo "plzvm unmap localhost:8080"
  echo "- Unmaps your Mac's port 8080 from one of your VM's ports."
  echo
  echo "plzvm map 2525 to foo:25"
  echo "- Maps your Mac's port 2525 to port 25 on the VM named \"foo\"."
  echo
  echo "plzvm unmap foo:25"
  echo "- Unmaps one of your Mac's ports from port 25 on the VM named \"foo\"."
  echo
  echo
  echo "Visit [ https://github.com/jvs/plzvm ] for the latest information on plzvm"
  echo
  exit 0
fi


# Get the name of the VM that the user is talking about. It's either the only
# only argument to this function, or if that argument is omitted, then it's the
# default VM.
targetvm() {
  if [[ $1 ]]; then echo $1; else echo $(defaultvm); fi
}


if [[ $1 = "start" ]]; then
  vm=$(targetvm $2)
  echo "Starting $vm"
  vboxmanage startvm $vm --type headless
  exit $?
fi


if [[ $1 = "stop" ]]; then
  vm=$(targetvm $2)
  echo "Stopping $vm"
  vboxmanage controlvm $vm poweroff
  exit $?
fi


if [[ $1 = "open" ]]; then
  vm=$(targetvm $2)
  echo "Opening $vm"
  vboxmanage startvm $vm
  exit $?
fi


if [[ $1 = "ssh" ]]; then

  # If the second argument contains an "@" sign, then split it into user name
  # and VM name. Otherwise, treat it as just the VM name.
  if [[ $2 =~ \@ ]]; then
    # Create an array of user and VM name.
    uservm=(${2//\@/ })
    user=${uservm[0]}
    vm=${uservm[1]}
    sshtarget="$user@localhost"
  else
    vm=$(targetvm $2)
    sshtarget=localhost
  fi

  # Find the port that maps to the VM's port 22.
  portnum=$(vboxmanage showvminfo $vm --machinereadable \
    | perl -lne 'print $1 if(/,tcp,,(\d+),,22/)')

  if [[ $portnum ]]; then
    echo "ssh -p $portnum $sshtarget"
    ssh -p $portnum $sshtarget
    exit $?
  else
    exit 1
  fi
fi


# For the "list" command, simply ask vboxmanage to list our VMs.
if [[ $1 = "list" && $2 = "vms" ]]; then
  listvms
  exit 0
fi


if [[ $1 = "list" && $2 = "ports" ]]; then
  if [[ $3 ]]; then
    vms=( $3 )
  else
    vms=$(listvms)
  fi

  for vm in $vms; do

    # If the user didn't specify a VM, then display a separator.
    if ! [[ $3 ]]; then
      # If this isn't the first VM, then add a blank line.
      if ! [[ $vm = ${vms[0]} ]]; then echo; fi
      echo "== $vm =="
    fi

    vboxmanage showvminfo $vm --machinereadable | perl -lne \
      "print \"localhost:\$1 -> $vm:\$2\" if(/\"[^,]+,tcp,,(\d+),,(\d+)/)"
  done

  exit 0
fi


if [[ $1 = "map" && $3 = "to" ]]; then
  localport=$2

  # If last the argument contains a ":" character, then split it into the
  # name of the VM and the port on the VM.
  if [[ $4 =~ \: ]]; then
    pair=(${4//\:/ })
    vm=${pair[0]}
    vmport=${pair[1]}
  else
    # Otherwise, treat the argument as the port number and use the default VM.
    vm=$(defaultvm)
    vmport=$4
  fi

  echo "Mapping port $localport on your Mac to port $vmport on your $vm VM."
  vboxmanage modifyvm $vm --natpf1 "local$localport,tcp,,$localport,,$vmport"
  exit $?
fi


# Require the second argument to contain a ":" character.
if [[ $1 = "unmap" && $2 =~ \: ]]; then

  # Split the second argument on the ":" character.
  pair=(${2//\:/ })
  target=${pair[0]}
  port=${pair[1]}

  # If the user specified "localhost", then look in all the VMs for a rule that
  # uses that local port.
  if [[ $target = "localhost" ]]; then
    localport=$port

    # Loop over all our VMs and stop if we find a rule that maps this port.
    for vm in $(listvms); do
      vmport=$(vboxmanage showvminfo $vm --machinereadable \
        | perl -lne "print \$1 if(/,tcp,,$localport,,(\d+)/)")

      # Break out of the loop if we found a rule.
      if [[ $vmport ]]; then break; fi
    done
  else
    # Otherwise, the user specified the name of a VM. So look at the VM's
    # settings to find the rule that maps to that port.
    vm=$target
    vmport=$port
    localport=$(vboxmanage showvminfo $vm --machinereadable \
      | perl -lne "print \$1 if(/,tcp,,(\d+),,$port/)")
  fi

  # If we have the VM and the two ports, then get the rule's name.
  if [[ $vm && $vmport && $localport ]]; then
    rulename=$(vboxmanage showvminfo $vm --machinereadable \
      | perl -lne "print \$1 if(/\"([^,]+),tcp,,$localport,,$vmport\"/)")
  fi

  # If we have a rule and a VM, then use "modifyvm" to delete the rule.
  # Otherwise, exit with nonzero.
  if [[ $rulename && $vm ]]; then
    echo "Unmapping localhost:$localport -> $vm:$vmport"
    vboxmanage modifyvm $vm --natpf1 delete $rulename
    exit $?
  else
    exit 1
  fi

fi


if [[ $1 = "install" ]]; then
  echo "Copying $(basename "$0") to /usr/local/bin/"
  cp $0 /usr/local/bin/
  exit $?
fi


if [[ $1 = "uninstall" ]]; then
  echo "Removing /usr/local/bin/$(basename "$0")"
  rm /usr/local/bin/$(basename "$0")
  exit $?
fi


if [[ $1 = "delete" && $2 ]]; then
  vboxmanage unregistervm $2 --delete
  exit $?
fi


getsize() {
  # Put a space in between the number and the units. In this case, just keep
  # the first character of the units. (No need to be a stickler in this case.)
  pad=$(perl -e "(uc \"$1\") =~ /(\\d+)(.)/i; print \"\$1 \$2\"")

  # ASK: What's a better way to do this in bash? This doesn't look great.
  pair=($pad)
  num=${pair[0]}
  how=${pair[1]}

  if [[ $how = "T" ]]; then result="$(($num * 1024 * 1024))"
  elif [[ $how = "G" ]]; then result="$(($num * 1024))"
  elif [[ $how = "M" ]]; then result=num
  elif [[ $how = "B" ]]; then result="$(($num / 1024))"
  fi

  echo $result
}


if [[ $1 = "create" && $2 ]]; then
  # Define default values.
  vdifolder=$PWD
  hddsize=$(getsize 32gb)
  ramsize=$(getsize 1gb)
  vramsize=$(getsize 128mb)

  vm=$2
  shift 2

  while [ -n "$1" ]; do
    if [[ $1 = "--iso" ]]; then iso=$2
    elif [[ $1 = "--ostype" ]]; then ostype=$2
    elif [[ $1 = "--saveto" ]]; then vdifolder=$2
    elif [[ $1 = "--hdd" ]]; then hddsize=$(getsize $2)
    elif [[ $1 = "--ram" ]]; then ramsize=$(getsize $2)
    elif [[ $1 = "--vram" ]]; then vramsize=$(getsize $2)
    elif [[ $1 = "--sshport" ]]; then sshport=$2
    fi
    shift 2
  done

  if ! [[ $iso ]]; then
    echo "Error: Missing ISO"
    echo "Please specify your ISO image using the '--iso' command line argument."
    exit 1
  fi

  if ! [[ -e $iso ]]; then
    echo "Cannot find the ISO image at $iso"
    exit 1
  fi

  if ! [[ -d $vdifolder ]]; then
    echo "Cannot find the directory '$vdifolder'"
    exit 1
  fi

  sizefmt='<number><gb|mb>'

  if ! [[ $hddsize ]]; then
    echo "Invalid --hdd setting. Expected '--hdd $sizefmt'"
    exit 1
  fi

  if ! [[ $ramsize ]]; then
    echo "Invalid --ram setting. Expected '--ram $sizefmt'"
    exit 1
  fi

  if ! [[ $vramsize ]]; then
    echo "Invalid --vram setting. Expected '--vram $sizefmt'"
    exit 1
  fi

  # Fail the whole script if any of our commands fail.
  set -e

  # This set up is based on instructions by Lee Mendelowitz:
  # https://leemendelowitz.github.io/blog/ubuntu-server-virtualbox.html

  if [[ $ostype ]]; then
    echo "Creating new VM named \"$vm\" with ostype $ostype."
    vboxmanage createvm --name $vm --ostype $ostype --register
  else
    echo "Creating new VM named \"$vm\" (with no ostype)."
    vboxmanage createvm --name $vm --register
  fi

  vdi="$vdifolder/$vm.vdi"
  echo "Creating new disk at \"$vdi\" with max size $hddsize MB."
  vboxmanage createmedium disk --filename $vdi --size $hddsize

  echo "Creating SATA Controller."
  vboxmanage storagectl $vm \
    --name "SATA Controller" \
    --add sata \
    --controller IntelAHCI

  echo  "Attaching SATA Controller to HDD: $vdi"
  vboxmanage storageattach $vm \
    --storagectl "SATA Controller" \
    --port 0 \
    --device 0 \
    --type hdd \
    --medium $vdi

  echo "Creating IDE Controller"
  vboxmanage storagectl $vm --name "IDE Controller" --add ide

  echo "Attaching IDE Controller to DVD: $iso"
  vboxmanage storageattach $vm \
    --storagectl "IDE Controller" \
    --port 0 \
    --device 0 \
    --type dvddrive \
    --medium $iso

  echo "Enable I/O APIC (required for 64-bit guest operating systems)."
  echo "Details: https://www.virtualbox.org/manual/ch03.html#settings-motherboard"
  vboxmanage modifyvm $vm --ioapic on

  echo "Start with $ramsize MB RAM and $vramsize MB video memory."
  vboxmanage modifyvm $vm --memory $ramsize --vram $vramsize

  echo "Use network address translation for network card #1."
  vboxmanage modifyvm $vm --nic1 nat

  if [[ $sshport ]]; then
    echo "Map local port $sshport to the port 22 on the VM (for ssh access)."
    vboxmanage modifyvm $vm --natpf1 "guestssh,tcp,,$sshport,,22"
  fi

  echo "Make the NAT engine use the host's resolver mechanisms to handle DNS requests."
  echo "Details: https://www.virtualbox.org/manual/ch09.html#nat-adv-dns"
  vboxmanage modifyvm $vm --natdnshostresolver1 on

  echo "Starting $vm"
  echo
  echo "Now use the interactive installation wizard to set up your server."
  echo
  echo "When you're done, log into the VM and install the ssh server:"
  echo
  echo '$ sudo apt-get update'
  echo '$ sudo apt-get install -y openssh-server'
  echo
  echo "(These commands should be run in your new \"$vm\" VM.)"
  echo
  echo "Then close the VM window and \"Power off\" the machine."
  echo
  echo "Now from your mac, use the plzvm 'start' and 'stop' commands to start"
  echo "and stop your VM. Use the plzvm 'ssh' command to ssh into your VM."
  echo
  vboxmanage startvm $vm
  exit $?
fi


# If the user didn't provide a valid command, then print the usage message
# and exit with an error.
usage
echo "Use 'plzvm help' to see more details about each command."
echo
exit 1
